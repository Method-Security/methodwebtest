{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"methodwebtest Documentation","text":"<p>Hello and welcome to the methodwebtest documentation. While we always want to provide the most comprehensive documentation possible, we thought you may find the below sections a helpful place to get started.</p> <ul> <li>The Getting Started section provides onboarding material</li> <li>The Development header is the best place to get started on developing on top of and with methodwebtest</li> <li>See the Docs section for a comprehensive rundown of methodwebtest capabilities</li> </ul>"},{"location":"index.html#about-methodwebtest","title":"About methodwebtest","text":"<p>methodwebtest is designed as a simple, easy to use web application scanning tool that security teams can use to automate the collection of data about their web applications. Designed with data-modeling and data-integration needs in mind, methodwebtest can be used on its own as an interactive CLI, orchestrated as part of a broader data pipeline, or leveraged from within the Method Platform.</p> <p>The types of scans that methodwebtest can conduct are constantly growing. For the most up to date listing, please see the documentation here</p> <p>To learn more about methodwebtest, please see the Documentation site for the most detailed information.</p>"},{"location":"index.html#quick-start","title":"Quick Start","text":""},{"location":"index.html#get-methodwebtest","title":"Get methodwebtest","text":"<p>For the full list of available installation options, please see the Installation page. For convenience, here are some of the most commonly used options:</p> <ul> <li><code>docker run methodsecurity/methodwebtest</code></li> <li><code>docker run ghcr.io/method-security/methodwebtest</code></li> <li>Download the latest binary from the Github Releases page</li> <li>Installation documentation</li> </ul>"},{"location":"index.html#examples","title":"Examples","text":"<pre><code>methodwebtest nginx query reverseproxy --targets https://example.com,https://example.dev --redirectaddress 127.0.0.1\n</code></pre> <pre><code>methodwebtest apache path traversal --targets https://example.com\n</code></pre>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Interested in contributing to methodwebtest? Please see our organization wide Contribution page.</p>"},{"location":"index.html#want-more","title":"Want More?","text":"<p>If you're looking for an easy way to tie methodwebtest into your broader cybersecurity workflows, or want to leverage some autonomy to improve your overall security posture, you'll love the broader Method Platform.</p> <p>For more information, visit us here</p>"},{"location":"index.html#community","title":"Community","text":"<p>methodwebtest is a Method Security open source project.</p> <p>Learn more about Method's open source source work by checking out our other projects here or our organization wide documentation here.</p> <p>Have an idea for a Tool to contribute? Open a Discussion here.</p>"},{"location":"community/community.html","title":"Contributing","text":"<p>For more information on how to get involved in the Method community, please see our organization wide documentation:</p> <ul> <li>Discussions</li> <li>Issues</li> <li>Pull Requests</li> </ul>"},{"location":"development/adding.html","title":"Adding a new capability","text":"<p>By design, methodwebtest breaks every unique network scan into its own top level command. If you are looking to add a brand new capability to the tool, you can take the following steps.</p> <ol> <li>Add a file to <code>cmd/</code> that corresponds to the sub-command name you'd like to add to the <code>methodwebtest</code> CLI</li> <li>You can use <code>cmd/general.go</code> as a template</li> <li>Your file needs to be a member function of the <code>methodwebtest</code> struct and should be of the form <code>Init&lt;cmd&gt;Command</code></li> <li>Add a new member to the <code>methodwebtest</code> struct in <code>cmd/root.go</code> that corresponsds to your command name. Remember, the first letter must be capitalized.</li> <li>Call your <code>Init</code> function from <code>main.go</code></li> <li>Add logic to your commands runtime and put it in its own package within <code>internal</code> (e.g., <code>internal/apache/path/traversal.go</code>)</li> </ol>"},{"location":"development/principles.html","title":"Project Principles","text":""},{"location":"development/principles.html#pre-run-run-post-run","title":"Pre-run -&gt; Run -&gt; Post-run","text":"<p>In the root command, we set a <code>PersistentPreRunE</code> and <code>PersistentPostRunE</code> function that is responsible for initializing the output format and Signal data (in the pre-run) and then write that data in the proper format (in the post-run).</p> <p>Within the Run command that every command must implement, the output of the collected data needs to be written back to the struct's <code>OutputSignal.Content</code> value in order to be properly written out to the caller.</p>"},{"location":"development/principles.html#cmd-vs-internal","title":"Cmd vs Internal","text":"<p>By design, the functionality within each command should focus around parsing the variety of flags and options that the command may need to control capability, passing off all real logic into internal modules.</p>"},{"location":"development/setup.html","title":"Development Setup","text":""},{"location":"development/setup.html#adding-a-new-capability","title":"Adding a new capability","text":"<p>To add a new scan to methodwebtest, providing new enumeration capabilities to security operators everywhere, please see the adding a new capability page.</p>"},{"location":"development/setup.html#setting-up-your-development-environment","title":"Setting up your development environment","text":"<p>If you've just cloned methodwebtest for the first time, welcome to the community! We use Palantir's godel to streamline local development and goreleaser to handle the heavy lifting on the release process.</p> <p>To get started with godel, you can run</p> <pre><code>./godelw verify\n</code></pre> <p>This will run a number of checks for us, including linters, tests, and license checks. We run this command as part of our CI pipeline to ensure the codebase is consistently passing tests.</p>"},{"location":"development/setup.html#building-the-cli","title":"Building the CLI","text":"<p>We can use godel to build our CLI locally by running</p> <pre><code>./godelw build\n</code></pre> <p>You should see output in <code>out/build/methodwebtest/&lt;version&gt;/&lt;os&gt;-&lt;arch&gt;/methodwebtest</code>.</p> <p>If you'd like to clean this output up, you can run</p> <pre><code>./godelw clean\n</code></pre>"},{"location":"development/setup.html#testing-releases-locally","title":"Testing releases locally","text":"<p>We can use goreleaser locally as well to test our builds. As methodwebtest uses cosign to sign our artifacts and Docker containers during our CI pipeline, we'll want to skip this step when running locally.</p> <pre><code>goreleaser release --snapshot --clean --skip sign\n</code></pre> <p>This should output binaries, distributable tarballs/zips, as well as docker images to your local machine's Docker registry.</p>"},{"location":"docs/index.html","title":"Capabilities","text":"<p>methodwebtest offers a variety of scanning techniques to security teams working to gain a better handle on what web applications they have deployed across cloud providers and on-premise environments. Each of the below pages offers you an in depth look at a methodwebtest capability related to a unique scanning technique.</p> <ul> <li>Apache</li> <li>Nginx</li> <li>General</li> </ul>"},{"location":"docs/index.html#top-level-flags","title":"Top Level Flags","text":"<p>methodwebtest has several top level flags that can be used on any subcommand. These include:</p> <pre><code>Flags:\n  -h, --help                 help for methodwebtest\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/index.html#version-command","title":"Version Command","text":"<p>Run <code>methodwebtest version</code> to get the exact version information for your binary</p>"},{"location":"docs/index.html#output-formats","title":"Output Formats","text":"<p>For more information on the various output formats that are supported by methodwebtest, see the Output Formats page in our organization wide documentation.</p>"},{"location":"docs/apache.html","title":"Apache","text":"<p>The <code>methodwebtest apache</code> command tests a target for Apache specific vulnerabilities.</p>"},{"location":"docs/apache.html#usage","title":"Usage","text":"<pre><code>methodwebtest apache [command]\n</code></pre>"},{"location":"docs/apache.html#commands","title":"Commands","text":""},{"location":"docs/apache.html#path","title":"Path","text":""},{"location":"docs/apache.html#usage_1","title":"Usage","text":"<pre><code>methodwebtest apache path [command]\n</code></pre>"},{"location":"docs/apache.html#commands_1","title":"Commands","text":""},{"location":"docs/apache.html#modfile","title":"Modfile","text":"<p>Perform modfile injection tests against a target</p>"},{"location":"docs/apache.html#usage_2","title":"Usage","text":"<pre><code>methodwebtest apache path modfile --targets https://example.com\n</code></pre>"},{"location":"docs/apache.html#help-text","title":"Help Text","text":"<pre><code>methodwebtest apache path modfile -h\nPerform modfile injection tests in the path of a target\n\nUsage:\n  methodwebtest apache path modfile [flags]\n\nFlags:\n  -h, --help   help for modfile\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --retries int          Number of attempts per credential pair\n      --sleep int            Sleep time between requests (seconds)\n      --targets strings      The URL of target\n      --timeout int          Timeout per request (seconds) (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/apache.html#traversal","title":"Traversal","text":"<p>Perform Apache specific path traversal injection tests against a target</p>"},{"location":"docs/apache.html#usage_3","title":"Usage","text":"<pre><code>methodwebtest apache path traversal --targets https://example.com --ignore-base-content-match false --responsecodes 200-299 --successfulonly\n</code></pre>"},{"location":"docs/apache.html#help-text_1","title":"Help Text","text":"<pre><code>methodwebtest apache path traversal  -h\nPerform a Apache specific path traversal for common file locations\n\nUsage:\n  methodwebtest apache path traversal [flags]\n\nFlags:\n  -h, --help                        help for traversal\n      --ignore-base-content-match   Ignores valid responses with identical size and word length to the base path, typically signifying a web backend redirect (default true)\n      --responsecodes string        Response codes to consider as valid responses (default \"200-299\")\n      --successfulonly              Only show successful attempts\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --retries int          Number of attempts per credential pair\n      --sleep int            Sleep time between requests (seconds)\n      --targets strings      The URL of target\n      --timeout int          Timeout per request (seconds) (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/general.html","title":"General","text":"<p>The <code>methodwebtest general</code> command tests a target for general vulnerabilities.</p>"},{"location":"docs/general.html#usage","title":"Usage","text":"<pre><code>methodwebtest general [command]\n</code></pre>"},{"location":"docs/general.html#commands","title":"Commands","text":""},{"location":"docs/general.html#header","title":"Header","text":""},{"location":"docs/general.html#usage_1","title":"Usage","text":"<pre><code>methodwebtest general header [command]\n</code></pre>"},{"location":"docs/general.html#commands_1","title":"Commands","text":""},{"location":"docs/general.html#misconfigured","title":"Misconfigured","text":""},{"location":"docs/general.html#usage_2","title":"Usage","text":"<pre><code>methodwebtest general header misconfigured --targets https://example.com --event CORS\n</code></pre>"},{"location":"docs/general.html#help-text","title":"Help Text","text":"<pre><code>methodwebtest general header misconfigured  -h\nPerform header tests to detect misconfigurations such as overly permissive CORS, \n        vulnerable HTTP methods, improper escape charecter handling, and Sensitive value exposure.\n\nUsage:\n  methodwebtest general header misconfigured [flags]\n\nFlags:\n      --event string   Specifies the header event to run: CORS, HTTP, ESCAPE, SENSITIVEEXPOSE\n  -h, --help           help for misconfigured\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --retries int          Number of attempts per credential pair\n      --sleep int            Sleep time between requests (seconds)\n      --targets strings      The URL of target\n      --timeout int          Timeout per request (seconds) (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/general.html#serveroverload","title":"Serveroverload","text":""},{"location":"docs/general.html#usage_3","title":"Usage","text":"<pre><code>methodwebtest general header serveroverload --targets https://example.com --headernames x-test-overload --headersize 10000\n</code></pre>"},{"location":"docs/general.html#help-text_1","title":"Help Text","text":"<pre><code>methodwebtest general header serveroverload  -h\nDefine the Header name and value length for server overload requests.\n\nUsage:\n  methodwebtest general header serveroverload [flags]\n\nFlags:\n      --headernames strings   Specifies Header keys to use in request. (default [test])\n      --headersize int        Specifies the length of header values to include in requests. (default 100)\n  -h, --help                  help for serveroverload\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --retries int          Number of attempts per credential pair\n      --sleep int            Sleep time between requests (seconds)\n      --targets strings      The URL of target\n      --timeout int          Timeout per request (seconds) (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/general.html#useragent","title":"Useragent","text":""},{"location":"docs/general.html#usage_4","title":"Usage","text":"<pre><code>methodwebtest general header useragent --targets https://example.com --agentheader python/2.7\n</code></pre>"},{"location":"docs/general.html#help-text_2","title":"Help Text","text":"<pre><code>methodwebtest general header useragent  -h     \nPreform User-Agent header requests.\n\nUsage:\n  methodwebtest general header useragent [flags]\n\nFlags:\n      --agentheader string   Value of the User-Agent header to use in request.\n  -h, --help                 help for useragent\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --retries int          Number of attempts per credential pair\n      --sleep int            Sleep time between requests (seconds)\n      --targets strings      The URL of target\n      --timeout int          Timeout per request (seconds) (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/general.html#path","title":"Path","text":""},{"location":"docs/general.html#usage_5","title":"Usage","text":"<pre><code>methodwebtest general path [command]\n</code></pre>"},{"location":"docs/general.html#commands_2","title":"Commands","text":""},{"location":"docs/general.html#crlf","title":"Crlf","text":""},{"location":"docs/general.html#usage_6","title":"Usage","text":"<pre><code>methodwebtest general path crlf --targets https://example.com --headername Set-Cookie --headervalue crlf-injection\n</code></pre>"},{"location":"docs/general.html#help-text_3","title":"Help Text","text":"<pre><code>methodwebtest general path crlf -h\nPerform CRLF injection tests in the path of a target\n\nUsage:\n  methodwebtest general path crlf [flags]\n\nFlags:\n      --headername string    The name of the header to inject\n      --headervalue string   The value of the header to inject\n  -h, --help                 help for crlf\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --retries int          Number of attempts per credential pair\n      --sleep int            Sleep time between requests (seconds)\n      --targets strings      The URL of target\n      --timeout int          Timeout per request (seconds) (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/general.html#traversal","title":"Traversal","text":"<p>Perform Apache specific path traversal injection tests against a target</p>"},{"location":"docs/general.html#usage_7","title":"Usage","text":"<pre><code>methodwebtest general path traversal --targets https://example.com --ignore-base-content-match false --responsecodes 200-299 --successfulonly\n</code></pre>"},{"location":"docs/general.html#help-text_4","title":"Help Text","text":"<pre><code>methodwebtest general path traversal -h\nPerform a path traversal against a URL target\n\nUsage:\n  methodwebtest general path traversal [flags]\n\nFlags:\n  -h, --help                        help for traversal\n      --ignore-base-content-match   Ignores valid responses with identical size and word length to the base path, typically signifying a web backend redirect (default true)\n      --pathlists strings           Path to a file that contains a new line delimited list of paths to fuzz\n      --paths strings               File paths to use in attack\n      --queryparam string           Optional query parameter to use in path traversal\n      --responsecodes string        Response codes to consider as valid responses (default \"200-299\")\n      --successfulonly              Only show successful attempts\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --retries int          Number of attempts per credential pair\n      --sleep int            Sleep time between requests (seconds)\n      --targets strings      The URL of target\n      --timeout int          Timeout per request (seconds) (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/general.html#multi","title":"Multi","text":"<p>Perform injection tests in the multiple locations of a target</p>"},{"location":"docs/general.html#usage_8","title":"Usage","text":"<pre><code>methodwebtest general multi --targets https://example.com --injectionlocation HEADER --method GET --eventtype XSSALERT --variabledata '{\"test\":\"test\"}'\n</code></pre>"},{"location":"docs/general.html#help-text_5","title":"Help Text","text":"<pre><code>methodwebtest general multi -h            \nPerform injection tests in the multiple locations of a target\n\nUsage:\n  methodwebtest general multi [flags]\n\nFlags:\n      --eventtype string           The event type to test: XSSALERT, SQLIBOOLEAN, SQLIESCAPE, SQLITIMEDELAY\n  -h, --help                       help for multi\n      --injectionlocation string   The injection location to test: HEADER, PATH, QUERY, BODY, FORM, MULTIPART\n      --method string              The HTTP method to use for the request\n      --variabledata string        Json string of variable names and base values to add to injects\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --retries int          Number of attempts per credential pair\n      --sleep int            Sleep time between requests (seconds)\n      --targets strings      The URL of target\n      --timeout int          Timeout per request (seconds) (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/nginx.html","title":"Nginx","text":"<p>The <code>methodwebtest nginx</code> command tests a target for Nginx specific vulnerabilities.</p>"},{"location":"docs/nginx.html#usage","title":"Usage","text":"<pre><code>methodwebtest nginx [command]\n</code></pre>"},{"location":"docs/nginx.html#commands","title":"Commands","text":""},{"location":"docs/nginx.html#header","title":"Header","text":""},{"location":"docs/nginx.html#usage_1","title":"Usage","text":"<pre><code>methodwebtest nginx header [command]\n</code></pre>"},{"location":"docs/nginx.html#commands_1","title":"Commands","text":""},{"location":"docs/nginx.html#bufferoverflow","title":"Bufferoverflow","text":"<p>Perform a buffer overflow test using the content header of a target</p>"},{"location":"docs/nginx.html#usage_2","title":"Usage","text":"<pre><code>methodwebtest nginx header bufferoverflow --targets https://example.com --bodysize 5000 --timeout 30\n</code></pre>"},{"location":"docs/nginx.html#help-text","title":"Help Text","text":"<pre><code>% method nginx header bufferoverflow -h\nPerform a buffer overflow test in the content header of a target\n\nUsage:\n  methodwebtest nginx header bufferoverflow [flags]\n\nFlags:\n      --bodysize int   The size of the body to send (default 5000)\n  -h, --help           help for bufferoverflow\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --retries int          Number of attempts per credential pair\n      --sleep int            Sleep time between requests (seconds)\n      --targets strings      The URL of target\n      --timeout int          Timeout per request (seconds) (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/nginx.html#path","title":"Path","text":""},{"location":"docs/nginx.html#usage_3","title":"Usage","text":"<pre><code>methodwebtest nginx path [command]\n</code></pre>"},{"location":"docs/nginx.html#commands_2","title":"Commands","text":""},{"location":"docs/nginx.html#traversal","title":"Traversal","text":"<p>Perform Nginx specific path traversal injection tests against a target</p>"},{"location":"docs/nginx.html#usage_4","title":"Usage","text":"<pre><code>methodwebtest nginx path traversal --targets https://example.com --ignore-base-content-match false --responsecodes 200-299 --successfulonly\n</code></pre>"},{"location":"docs/nginx.html#help-text_1","title":"Help Text","text":"<pre><code>% methodwebtest nginx path traversal  -h\nPerform a Nginx specific path traversal for common file locations\n\nUsage:\n  methodwebtest nginx path traversal [flags]\n\nFlags:\n  -h, --help                        help for traversal\n      --ignore-base-content-match   Ignores valid responses with identical size and word length to the base path, typically signifying a web backend redirect (default true)\n      --responsecodes string        Response codes to consider as valid responses (default \"200-299\")\n      --successfulonly              Only show successful attempts\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --retries int          Number of attempts per credential pair\n      --sleep int            Sleep time between requests (seconds)\n      --targets strings      The URL of target\n      --timeout int          Timeout per request (seconds) (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"docs/nginx.html#query","title":"Query","text":""},{"location":"docs/nginx.html#usage_5","title":"Usage","text":"<pre><code>methodwebtest nginx query [command]\n</code></pre>"},{"location":"docs/nginx.html#commands_3","title":"Commands","text":""},{"location":"docs/nginx.html#reverseproxy","title":"Reverseproxy","text":"<p>Perform Nginx specific reverse proxy injection tests against a target</p>"},{"location":"docs/nginx.html#usage_6","title":"Usage","text":"<pre><code>methodwebtest nginx query reverseproxy --targets https://example.com --redirectaddress 127.0.0.1\n</code></pre>"},{"location":"docs/nginx.html#help-text_2","title":"Help Text","text":"<pre><code>% method nginx query reverseproxy -h\nPerform injection tests in the reverse proxy of a target\n\nUsage:\n  methodwebtest nginx query reverseproxy [flags]\n\nFlags:\n  -h, --help                     help for reverseproxy\n      --redirectaddress string   Specifies the target address for redirection (default \"127.0.0.1\")\n\nGlobal Flags:\n  -o, --output string        Output format (signal, json, yaml). Default value is signal (default \"signal\")\n  -f, --output-file string   Path to output file. If blank, will output to STDOUT\n  -q, --quiet                Suppress output\n      --retries int          Number of attempts per credential pair\n      --sleep int            Sleep time between requests (seconds)\n      --targets strings      The URL of target\n      --timeout int          Timeout per request (seconds) (default 30)\n  -v, --verbose              Verbose output\n</code></pre>"},{"location":"getting-started/basic-usage.html","title":"Basic Usage","text":""},{"location":"getting-started/basic-usage.html#binaries","title":"Binaries","text":"<p>Running as a binary allows you to skip dealing with any container related networking issues and leverage the same network interface that the host machine is using.</p> <pre><code>methodwebtest apache path traversal --targets https://example.com\n</code></pre>"},{"location":"getting-started/basic-usage.html#docker","title":"Docker","text":"<p>Running methodwebtest within a Docker container should typically work similarly to running directly on a host, however, occasionally there are a few things to keep in mind.</p> <p>If you're running on a Docker container on a MacOS machine and you are trying to scan a locally running service, you can leverage the <code>host.docker.internal</code> address as mentioned in the Docker documentation here.</p> <pre><code>docker run ghcr.io/method-security/methodwebtest \\\n  apache path traversal --targets https://example.com\n</code></pre>"},{"location":"getting-started/installation.html","title":"Getting Started","text":"<p>If you are just getting started with methodwebtest, welcome! This guide will walk you through the process of going zero to one with the tool.</p>"},{"location":"getting-started/installation.html#installation","title":"Installation","text":"<p>methodwebtest is provided in several convenient form factors, including statically compiled binary images on a variety of architectures as well as a Docker image for both x86 and ARM machines.</p> <p>If you do not see an architecture that you require, please open a Discussion to propose adding it.</p>"},{"location":"getting-started/installation.html#binaries","title":"Binaries","text":"<p>methodwebtest currently supports statically compiled binaries across the following operating systems and architectures:</p> OS Architecture Linux amd64 Linux arm64 MacOS arm64 Windows amd64 <p>The latest binaries can be downloaded directly from Github.</p>"},{"location":"getting-started/installation.html#docker","title":"Docker","text":"<p>Docker images for methodwebtest are hosted in both Github Container Registry as well as on Docker Hub and can be pulled via:</p> <pre><code>docker pull ghcr.io/method-security/methodwebtest\n</code></pre> <pre><code>docker pull methodsecurity/methodwebtest\n</code></pre>"}]}